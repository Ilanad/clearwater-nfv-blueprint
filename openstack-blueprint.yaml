tosca_definitions_version: cloudify_dsl_1_3

########################################################

imports:
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - types/openstack.yaml
  - types/policy.yaml
  - application-blueprint.yaml

########################################################

inputs:

  image:
    description: Image to be used when launching agent VM's

  flavor:
    description: Flavor of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's
    default: ubuntu

  key_name:
    default: clearwater-blueprint-key

  private_key_path:
    default: ~/.ssh/clearwater-blueprint-key.pem

  external_network_name:
    default: external

  router_name:
    description: The Router Name

  public_network_name:
    description: The name of the Openstack public network.

  public_subnet_name:
    description: The name of the public network subnet.

  private_network_name:
    description: The name of the Openstack private network.

  private_subnet_name:
    description: The name of the private network subnet.

  region:
    default: ''

  subnet_cidr:
    default: 192.168.120.0/24

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_input: region }

########################################################

node_templates:

  all_nodes_external:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: All Clearwater Nodes External
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: 0
          port_range_max: 8
          protocol: icmp

  all_nodes_internal:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: All Clearwater Nodes Internal
      rules:
        - remote_ip_prefix: { get_input: subnet_cidr }
          protocol: null
          port: null
        - remote_group_name: { get_property: [ all_nodes_external, security_group, name ] }
          port_range_min: 161
          port_range_max: 162
          protocol: udp
        - remote_group_name: { get_property: [ all_nodes_external, security_group, name ] }
          port: 2380
        - remote_group_name: { get_property: [ all_nodes_external, security_group, name ] }
          port: 4000
        - remote_ip_prefix: { get_input: subnet_cidr }
          port_range_min: 5060
          port_range_max: 5061
    relationships:
      - type: cloudify.relationships.depends_on
        target: all_nodes_external

  ellis_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Ellis VM Security Group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 443

  bono_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Bono VM Security Group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 3478
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 3478
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5060
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5060
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5062
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: 32768
          port_range_max: 65535
          protocol: udp

  bono_to_others_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Bono to Others VM Security Group
      rules:
        - remote_group_name: { get_property: [ bono_vm_security_group, security_group, name ] }
          port: 5058
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 5058
    relationships:
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group

  sprout_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Sprout VM Security Group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 443

  sprout_to_others_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Sprout to Others VM Security Group
      rules:
        - remote_group_name: { get_property: [ bono_vm_security_group, security_group, name ] }
          port: 5052
        - remote_group_name: { get_property: [ bono_vm_security_group, security_group, name ] }
          port: 5054
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 7000
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 7253
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 9160
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 11211
        - remote_group_name: { get_property: [ homestead_vm_security_group, security_group, name ] }
          port: 9888
    relationships:
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homestead_vm_security_group

  homestead_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Homestead VM Security Group

  homestead_to_others_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Homestead to Others VM Security Group
      rules:
        - remote_group_name: { get_property: [ homestead_vm_security_group, security_group, name ] }
          port: 7000
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 8888
        - remote_group_name: { get_property: [ ellis_vm_security_group, security_group, name ] }
          port: 8888
        - remote_group_name: { get_property: [ ellis_vm_security_group, security_group, name ] }
          port: 8889
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ellis_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homestead_vm_security_group

  homer_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Homer VM Security Group

  homer_to_others_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Homer to Others VM Security Group
      rules:
        - remote_group_name: { get_property: [ homer_vm_security_group, security_group, name ] }
          port: 7000
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 7888
        - remote_group_name: { get_property: [ ellis_vm_security_group, security_group, name ] }
          port: 7888
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ellis_vm_security_group
      - type: cloudify.relationships.depends_on
        target: homer_vm_security_group

  ralf_vm_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Ralf VM Security Group

  ralf_to_others_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: Ralf to Others VM Security Group
      rules:
        - remote_group_name: { get_property: [ ralf_vm_security_group, security_group, name ] }
          port: 7253
        - remote_group_name: { get_property: [ sprout_vm_security_group, security_group, name ] }
          port: 10888
        - remote_group_name: { get_property: [ bono_vm_security_group, security_group, name ] }
          port: 10888
        - remote_group_name: { get_property: [ ralf_vm_security_group, security_group, name ] }
          port: 11211
    relationships:
      - type: cloudify.relationships.depends_on
        target: sprout_vm_security_group
      - type: cloudify.relationships.depends_on
        target: bono_vm_security_group
      - type: cloudify.relationships.depends_on
        target: ralf_vm_security_group

  bind_host_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: DNS VM Security Group
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        port: 53
        protocol: udp
      - remote_ip_prefix: 0.0.0.0/0
        port: 53

  bono_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

  ellis_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_property: [ external_network, resource_id ] }

##########################################################################

  policy_node:
    type: policy_node_type
    properties:
      nodes_to_monitor:
        - ellis_vm
        - bono_vm
        - sprout_vm
        - homestead_vm
        - homer_vm
        - ralf_vm
        - bind_host
    relationships:
      - type: cloudify.relationships.depends_on
        target: ellis_vm
      - type: cloudify.relationships.depends_on
        target: bono_vm
      - type: cloudify.relationships.depends_on
        target: sprout_vm
      - type: cloudify.relationships.depends_on
        target: homestead_vm
      - type: cloudify.relationships.depends_on
        target: homer_vm
      - type: cloudify.relationships.depends_on
        target: ralf_vm
      - type: cloudify.relationships.depends_on
        target: bind_host

  ellis_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: ellis_vm_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: ellis_ip

  ellis_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: ellis_vm_port
        type: cloudify.openstack.server_connected_to_port

  bono_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: public_network
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: bono_vm_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: bono_to_others_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: bono_ip

  bono_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
      management_network_name: { get_property: [ public_network, resource_id ] }
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: bono_vm_port
        type: cloudify.openstack.server_connected_to_port

  sprout_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: sprout_vm_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: sprout_to_others_security_group

  sprout_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: sprout_vm_port
        type: cloudify.openstack.server_connected_to_port

  homestead_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: homestead_vm_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: homestead_to_others_security_group

  homestead_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: key
        type: cloudify.openstack.server_connected_to_keypair
      - target: homestead_vm_port
        type: cloudify.openstack.server_connected_to_port

  homer_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: homer_vm_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: homer_to_others_security_group

  homer_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: homer_vm_port
        type: cloudify.openstack.server_connected_to_port
      - target: key
        type: cloudify.openstack.server_connected_to_keypair

  ralf_vm_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: ralf_vm_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: ralf_to_others_security_group

  ralf_vm:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: ralf_vm_port
        type: cloudify.openstack.server_connected_to_port
      - target: key
        type: cloudify.openstack.server_connected_to_keypair

  bind_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_internal
      - type: cloudify.openstack.port_connected_to_security_group
        target: all_nodes_external
      - type: cloudify.openstack.port_connected_to_security_group
        target: bind_host_security_group

  bind_host:
    type: clearwater.nodes.MonitoredServer
    properties:
      openstack_config: *openstack_config
    relationships:
      - target: bind_host_port
        type: cloudify.openstack.server_connected_to_port
      - target: key
        type: cloudify.openstack.server_connected_to_keypair

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_name }
    relationships:
      - target: private_network
        type: cloudify.relationships.contained_in

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: private_network_name }

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_name }
    relationships:
      - target: public_network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: public_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  key:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_name }
      private_key_path: { get_input: private_key_path }

########################################################

  bono:
    type: clearwater.nodes.bono
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ bono_ip, floating_ip_address ] }
    relationships:
      - type: monitors_bono_nodes
        target: bono_vm
      - type: app_connected_to_bind
        target: bind
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                public_ip: { get_attribute: [ bono_ip, floating_ip_address ] }

  ellis:
    type: clearwater.nodes.ellis
    properties:
      private_domain: { get_input: private_domain }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            public_ip: { get_attribute: [ ellis_ip, floating_ip_address ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ellis_vm
      - type: app_connected_to_bind_ellis
        target: bind
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            establish:
              inputs:
                public_ip: { get_attribute: [ ellis_ip, floating_ip_address ] }

  ralf:
    type: clearwater.nodes.ralf
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_ralf_nodes
        target: ralf_vm
      - type: app_connected_to_bind
        target: bind

  homestead:
    type: clearwater.nodes.homestead
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_homestead_nodes
        target: homestead_vm
      - type: app_connected_to_bind
        target: bind

  homer:
    type: clearwater.nodes.homer
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: cloudify.relationships.contained_in
        target: homer_vm
      - type: app_connected_to_bind
        target: bind

  sprout:
    type: clearwater.nodes.sprout
    properties:
      private_domain: { get_input: private_domain }
    relationships:
      - type: monitors_sprout_nodes
        target: sprout_vm
      - type: app_connected_to_bind
        target: bind

  bind:
    type: clearwater.infra.bind
    properties:
      private_domain: { get_input: private_domain }
      public_domain: { get_input: public_domain }
      secret_code: secret
    relationships:
      - type: cloudify.relationships.contained_in
        target: bind_host

########################################################

outputs:
  web:
    description: Web application endpoint
    value:
      ip_ellis: { get_attribute: [ ellis_ip, floating_ip_address ] }
      ip_bono: { get_attribute: [ bono_ip, floating_ip_address ] }
      signup_code: secret
  stress_test:
    description: Information needed to install stress test
    value:
      ip_homer: { get_attribute: [ homer_vm, ip ] }
      ip_homestead: { get_attribute: [ homestead_vm, ip ] }
      ip_bono: { get_attribute: [ bono_vm, ip ] }
